###############################################################################
# Copyright 2017 - Universit√© d'Artois
#
# This file is part of SonarQube Golang plugin (sonar-golang).
#
# Sonar-golang is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sonar-golang is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Sonar-golang.  If not, see <http://www.gnu.org/licenses/>.
#
# Contributors:
#            Thibault Falque (thibault_falque@ens.univ-artois.fr)
###############################################################################
#golint\:ExportedType=exported type [a-zA-Z0-9]+ should have comment or be unexported
golint\:FormComment=comment on exported [a-zA-Z0-9]+ [a-zA-Z0-9\.]+ should be of the form "[a-zA-Z\.]+ *\t*..."
golint\:AllCaps=don't use ALL_CAPS in Go names; use CamelCase
golint\:UnderscoreInPackageName=don't use an underscore in package name
golint\:LeadingK=don't use leading k in Go names; [a-zA-Z0-9]+ [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
golint\:UnderscoreInGoName=don't use underscores in Go names; [a-zA-Z0-9]+ [a-zA-Z0-9_]+ should be [a-zA-Z0-9]+
golint\:ErrorLastReturn=error should be the last type when returning multiple items
golint\:ErrorEndString=error strings should not be capitalized or end with punctuation or a newline
golint\:ErrorVarName=error var [a-zA-Z0-9]+ should have name of the form [a-zA-Z0-9]+
golint\:AnnoyingUseExportedType=exported [a-zA-Z0-9]+ [a-zA-Z0-9]+ returns unexported type [a-zA-Z0-9]+, which can be annoying to use
golint\:IfBlockReturn=if block ends with a return statement, so drop this else and outdent its block
golint\:PackageCommentForm=package comment should be of the form \"[a-zA-Z0-9]+...\"
golint\:PackageCommentSpace=package comment should not have leading space
golint\:ReceiverNameConsistent=receiver name [a-zA-Z0-9]+ should be consistent with previous receiver name [a-zA-Z0-9]+ for [a-zA-Z0-9]+
golint\:ReceiverNameReflection=receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\"
golint\:ReceiverNameNotUnderscore=receiver name should not be an underscore
golint\:DropAssignment=should drop = [a-zA-Z0-9]+ from declaration of var [a-zA-Z0-9]+; it is the zero value
golint\:HavePackageComment=should have a package comment, unless it's in another file for this package
golint\:NotUseBasicType=should not use basic type [a-zA-Z0-9]+ as key in context.WithValue
golint\:NotUseDotImport=should not use dot imports
golint\:Omit2ndValueFromRange=should omit 2nd value from range; this loop is equivalent to `for [a-zA-Z0-9]+ := range ...`
golint\:OmitType=should omit type [a-zA-Z0-9]+ from declaration of var [a-zA-Z0-9]+; it will be inferred from the right-hand side
golint\:ReplaceLintIncDec=should replace [a-zA-Z0-9\-\+=]+ with [a-zA-Z0-9\-\+]+
golint\:ReplaceSprintf=should replace [a-zA-Z0-9\.]+\\(fmt.Sprintf\\(...\\)\\) with [a-zA-Z0-9]+.Errorf\\(...\\)
golint\:Initialisms=[a-zA-Z0-9]+ [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
golint\:PackageNames=[a-zA-Z0-9]+ name will be used as [a-zA-Z0-9]+.[a-zA-Z0-9]+ by other packages, and that stutters; consider calling this [a-zA-Z0-9]+
golint\:BlankImport=a blank import should be only in a main or test package, or have a comment justifying it
golint\:CommentExportedType=comment on exported type [a-zA-Z0-9]+ should be of the form "[a-zA-Z0-9]+ ..." \\(with optional leading article\\)
golint\:ContextContextFirstArg=context.Context should be the first parameter of a function
golint\:ExportedHaveComment=exported [a-zA-Z0-9]+ [a-zA-Z0-9\.]+ should have comment or be unexported
golint\:ExportedHaveComment2=exported [a-zA-Z0-9\.]+ [a-zA-Z0-9\.]+ should have comment[\(\) a-zA-Z0-9]+ or be unexported
golint\:ExportedDeclaration=exported [a-zA-Z0-9]+ [a-zA-Z0-9]+ should have its own declaration
golint\:SpecificSuffix=var [a-zA-Z0-9]+ is of type [a-zA-Z0-9\.]+; don't use unit-specific suffix [a-zA-Z0-9]+
golint\:StructFieldInitialisms=struct field [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
gocyclo\:CyclomaticComplexity=cyclomatic complexity [0-9]+ of function [a-zA-Z0-9]+\\(\\) is high \\(> 10\\)
errcheck\:ValueNotChecked=error return value not checked .*
unconvert\:UnnecessaryConversion=unnecessary conversion
structcheck\:UnusedStructField=unused struct field \\w+[\\w\\.]*
gosimple\:ChannelInsteadSelect=
ineffassign\:IneffectualAssignment=ineffectual assignment to [a-zA-Z0-9]+
gas\:UnhandledErrors=Errors unhandled\.,LOW,HIGH
goimports\:FileNotImported=file is not goimported
vet\:Unreachable=unreachable code
vet\:Shadow=declaration of "[A-Za-z0-9\.]+" shadows declaration at [A-Za-z0-9_\-]+.go:[0-9]+
vet\:Misuse=possible misuse of unsafe.Pointer
gas\:SQLFormatting=SQL string formatting,MEDIUM,HIGH
gas\:SQLConcatenation=SQL string concatenation,MEDIUM,HIGH
gas\:RSAKeyLength=RSA keys should be at least 2048 bits,MEDIUM,HIGH
gas\:UnsafeCall=Use of unsafe calls should be audited,LOW,HIGH
gas\:UnescapedHTMLTemplates=this method will not auto-escape HTML\. Verify data is well formed\.,MEDIUM,LOW
gas\:WeakCrypto=Use of weak cryptographic primitive,HIGH,HIGH
vet:\Lock=[A-Za-z0-9\.]+ passes lock by value: [A-Za-z0-9\.]+ contains [A-Za-z0-9\.]+
